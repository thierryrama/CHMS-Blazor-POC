@using System.Globalization;
@using Microsoft.AspNetCore.WebUtilities;

<Router AppAssembly="@typeof(App).Assembly" OnNavigateAsync="OnNavigateAsync">
    <Found Context="routeData">
        <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
        <FocusOnNavigate RouteData="@routeData" Selector="h1" />
    </Found>
    <NotFound>
        <PageTitle>Not found</PageTitle>
        <LayoutView Layout="@typeof(MainLayout)">
            <p role="alert">Sorry, there's nothing at this address.</p>
        </LayoutView>
    </NotFound>
</Router>

@code {
    [Inject]
    private ILogger<App> Logger { get; set; }

    [Inject]
    private CultureManager CultureManager { get; set;  }

    [Inject]
    private NavigationManager NavigationManager { get; set;  }

    /// <summary>
    /// Intercepts the navigation to detect the <c>culture</c> query parameter set by the <see cref="CultureSelector"/>. When the <c>culture</c> query parameter is detected,
    /// the culture is changed to its value with the <see cref="CultureManager"/>. Which should trigger any <see cref=CultureChangeAwareComponent"/> to re-render.
    /// </summary>
    /// <param name="arg"></param>
    private Task OnNavigateAsync(NavigationContext arg)
    {
        Logger.LogDebug("Navigating to {Path}", arg.Path);

        var uri = NavigationManager.ToAbsoluteUri(arg.Path);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("culture", out var culture))
        {
            if (CultureManager.CurrentCulture.Name != culture)
            {
                Logger.LogDebug("Changing culture to {Value}", culture);
                CultureManager.ChangeCulture(this, new CultureInfo(culture));
            }
        }

        return Task.CompletedTask;
    }
}
