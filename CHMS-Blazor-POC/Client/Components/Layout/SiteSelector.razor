@inherits CultureChangeAwareComponent
@inject DialogService DialogService
@inject SiteSelectorViewModel ViewModel

<RadzenTemplateForm TItem="SiteSelectorViewModel.SiteSelectorForm" Data="@ViewModel.Form" Submit="OnSubmitAsync">
    <div class="row">
        <div class="col-md-2">
            <RadzenLabel Text="Cycle" Component="Cycle"/>
        </div>
        <div class="col-md-10">
            <RadzenDropDown Name="Cycle" TValue="int?"
                            Data="@ViewModel.Cycles" @bind-Value="@ViewModel.Form.Cycle"
                            TextProperty="Name" ValueProperty="Id"
                            Change="OnCycleChangeAsync"
                            Placeholder="Select..."
                            AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"/>
            <RadzenRequiredValidator Component="Cycle" Text="Cycle is required"/>
        </div>
    </div>

    <div class="row">
        <div class="col-md-2">
            <RadzenLabel Text="Site" Component="Site"/>
        </div>
        <div class="col-md-10">
            <RadzenDropDown Name="Site" TValue="int?"
                            Data="@ViewModel.Sites" @bind-Value="@ViewModel.Form.Site"
                            TextProperty="Name" ValueProperty="Id"
                            Placeholder="Select..."
                            AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"/>
            <RadzenRequiredValidator Component="Site" Text="Site is required"/>
        </div>
    </div>

    <div class="row">
        <div class="col-md-12 text-right">
            <RadzenButton ButtonStyle="ButtonStyle.Secondary" Text="Cancel" Click="OnCancelAsync"/>
            <RadzenButton ButtonType="ButtonType.Submit" Text="Select"/>
        </div>
    </div>
</RadzenTemplateForm>

@code {
    protected override async Task OnInitializedAsync()
    {
        await ViewModel.InitializeAsync();
    }
    
    private async Task OnCycleChangeAsync()
    {
        await ViewModel.FetchSitesAsync();
    }
    
    private Task OnCancelAsync()
    {
        DialogService.Close();
        return Task.CompletedTask;
    }
    
    private async Task OnSubmitAsync()
    {
        await ViewModel.SaveAsync();
        DialogService.Close();
    }
}