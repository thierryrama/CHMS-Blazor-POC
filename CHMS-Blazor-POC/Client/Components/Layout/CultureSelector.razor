@inherits CultureChangeAwareComponent
@using System.Globalization
@inject IStringLocalizer<CultureSelector> Loc

<h2 class="wb-inv">@Loc["Heading"]</h2>
<ul class="list-inline margin-bottom-none">
@foreach (var culture in SupportedCultures)
{
	@if (!culture.Equals(CurrentCulture))
	{
		<li @key="culture" id="wet-fullhd-lang">
			<a href="@GetLink(culture)"
				class="link"
				hreflang="@culture.TwoLetterISOLanguageName"
				lang="@culture.TwoLetterISOLanguageName"
				>
				@Loc[culture.Name]
			</a>
		</li>
	}
}
</ul>

@code {
	// This component is used to select the culture. However, it's not its responsibility to perform the actual culture change.
	//
	// When a culture is selected, this component will set the "culture" query parameter on the current page. Another component has
	// to detect the query pameter and perform the actual culture change.
	//
	// Currently, the actual culture change is performed by hooking to the Router.OnNavigateAsync event. See App.razor.

	[Inject]
	private NavigationManager NavigationManager { get; set; }

	/// <summary>
	/// The current culture.
	/// </summary>
	[Parameter]
	public CultureInfo CurrentCulture { get; set; }

	/// <summary>
	/// The supported cultures to select from.
	/// </summary>
	[Parameter]
	public CultureInfo[] SupportedCultures { get; set; }

	/// <summary>
	/// Get the link to switch the current page to the given culture.
	/// </summary>
	/// <param name="culture">The culture to switch to</param>
	/// <returns>The link to switch the culture</returns>
	private String GetLink(CultureInfo culture)
	{
		return NavigationManager.GetUriWithQueryParameter("culture", culture.Name);
	}
}
