@inherits CultureChangeAwareComponent
@using System.Globalization
@inject IStringLocalizer<CultureSelector> Loc

@foreach (var culture in SupportedCultures)
{
	@if (!culture.Equals(CurrentCulture))
	{
		<MudLink key="@culture" lang="@culture.TwoLetterISOLanguageName" hreflang="@culture.TwoLetterISOLanguageName"
		         Href="@GetLink(culture)">
			@Loc[culture.Name]
		</MudLink>
	}
}

@code {
	// This component is used to select the culture. However, it's not directly dispatching a Flux action to request
	// the culture change.
	//
	// Instead, this component will set the "culture" query parameter on the current page. An effect in the
	// Culture Selection feature will detect the "culture" query parameter. 
	//
	// We implemented it this way because we also have to support setting the culture through the query parameter.

	[Inject]
	private NavigationManager NavigationManager { get; set; }

	/// <summary>
	/// The current culture.
	/// </summary>
	[Parameter]
	public CultureInfo CurrentCulture { get; set; }

	/// <summary>
	/// The supported cultures to select from.
	/// </summary>
	[Parameter]
	public CultureInfo[] SupportedCultures { get; set; }

	/// <summary>
	/// Get the link to switch the current page to the given culture.
	/// </summary>
	/// <param name="culture">The culture to switch to</param>
	/// <returns>The link to switch the culture</returns>
	private String GetLink(CultureInfo culture)
	{
		return NavigationManager.GetUriWithQueryParameter("culture", culture.Name);
	}
}
