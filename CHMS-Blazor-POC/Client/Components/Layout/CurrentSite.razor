@using System.Timers
@inherits CultureChangeAwareComponent
@inject CurrentSiteViewModel ViewModel
@inject IStringLocalizer<CurrentSite> Loc

@if (ViewModel.IsCurrentSiteAvailable())
{
    <MudText Class="pl-3" Color="Color.Inherit">
        @ViewModel.TimeZone!.DisplayName
        <br/>
        @FormattedTime
    </MudText>
}

@code {
    private Timer? _timer;
    
    protected override void OnInitialized()
    {
        _timer = new Timer(30000);
        _timer.Elapsed += RefreshTime!;
        _timer.Enabled = true;
        
        ViewModel.OnSiteChanged += SiteChanged;
        
        base.OnInitialized();
    }

    private void SiteChanged(object? sender, SiteChangedEventArgs e)
    {
        StateHasChanged();
    }

    private void RefreshTime(object? sender, ElapsedEventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }

    private string? FormattedTime => ViewModel.Time?.ToString(Loc["TimeFormat"]);

    protected override void Dispose(bool disposing)
    {
        if (disposing)
        {
            if (_timer != null)
            {
                _timer.Elapsed -= RefreshTime!;
                _timer.Enabled = false;
            }

            ViewModel.OnSiteChanged -= SiteChanged;
        }
        
        base.Dispose(disposing);
    }
}