@page "/calendarToastUI"
@inherits CultureChangeAwareComponent
@using StatCan.Chms.Client.OpenApi.ViewModels.CalendarToastUI
@using toast_ui.blazor_calendar
@using toast_ui.blazor_calendar.Models
@using System.ComponentModel
@implements IDisposable

@inject CalendarViewModel ViewModel

<h1>Hello, world!</h1>

Welcome to your new app. <br />

<div class="btn-group m-2" role="group" aria-label="Basic example">
  <button type="button" @onclick=@(()=> ChangeCalendarView(TUICalendarViewName.Month)) class="btn btn-secondary">Month</button>
  <button type="button" @onclick=@(()=> ChangeCalendarView(TUICalendarViewName.Week)) class="btn btn-secondary">Week</button>
  <button type="button" @onclick=@(()=> ChangeCalendarView(TUICalendarViewName.Day)) class="btn btn-secondary">Day</button>
</div>
<br />
<div class="btn-group m-2" role="group" aria-label="Basic example">
    <button type="button" @onclick=@(async ()=> await MoveCalendarView(CalendarMove.Previous)) class="btn btn-secondary">Previous</button>
    <button type="button" @onclick=@(async ()=> await MoveCalendarView(CalendarMove.Today)) class="btn btn-secondary">Today</button>
    <button type="button" @onclick=@(async ()=> await MoveCalendarView(CalendarMove.Next)) class="btn btn-secondary">Next</button>
</div>
<div>
    <button type="button" @onclick=@(()=> ScrollToNow()) class="btn btn-secondary">Scroll To Now</button>
</div>

<div class="d-flex flex-row align-items-center m-2">
    <div class="pr-2">Scroll To Date:</div>
    <div class="text-sm-center">
        <input type="date" value="@selectDate.ToString("MM/dd/yyyy")" @onchange="@(async (e) => await ScrollToDate(DateTimeOffset.Parse(e.Value.ToString())))" />
    </div>
</div>
<div class="btn-group m-2" role="group" aria-label="Basic example">
<button type="button" @onclick=@(()=> ClearCalendar()) class="btn btn-secondary">Clear Calendar</button>
</div>

<div>@ViewModel.StartDate.GetValueOrDefault().LocalDateTime.ToShortDateString() - @ViewModel.EndDate.GetValueOrDefault().LocalDateTime.ToShortDateString()</div>


<TUICalendar
    OnCreateCalendarEventOrTask="async schedule => await OnCreateSchedule(schedule)"
    OnClickCalendarEventOrTask="async scheduleId => await OnClickSchedule(scheduleId)"
    OnDeleteCalendarEventOrTask="async scheduleId => await OnDeleteSchedule(scheduleId)"
    OnChangeCalendarEventOrTask="async schedule => await OnChangeCalendar(schedule)"
    Schedules="ViewModel.Schedules"
    CalendarOptions="ViewModel.CalendarOptions"
    CalendarProperties="ViewModel.CalendarProps"
    CalendarViewName="ViewModel.CalendarViewName"
    @bind-VisibleStartDateRange="ViewModel.StartDate"
    @bind-VisibleEndDateRange="ViewModel.EndDate"
    @ref=_calendarRef>
</TUICalendar>

<SurveyPrompt Title="How is Blazor working for you?" />

@code{
    // Problems with the toast_ui.blazor_calendar component:
    // 1. It hasn't implemented the Calendar.template property which is supposed to allow us to implement, among other things,
    //    localization by overriding the different label functions.
    //
    //    See Template(Customize UI) in https://github.com/nhn/tui.calendar/blob/master/docs/getting-started.md
    //
    // 2. It hasn't implemented a way to use a different dialog than the default ones for the creation and editing of a schedule.
    //    The OnCreateCalendarEventOrTask should have been the entry point for a custom create dialog but it doesn't really work
    //    that way. It always acts as if the default dialog was used.
    //
    //    See Customize Popups in https://github.com/nhn/tui.calendar/blob/master/docs/getting-started.md
    
    private TUICalendar _calendarRef;
    private DateTimeOffset selectDate = DateTimeOffset.Now;

    protected override async Task OnInitializedAsync()
    {
        await ViewModel.InitCalendarDataAsync();
        ViewModel.PropertyChanged += OnPropertyChangedHandler;
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        Console.WriteLine("OnAfterRenderAsync, schedule count: {0}", _calendarRef.Schedules == null ? 0 : _calendarRef.Schedules.Count);
        return base.OnAfterRenderAsync(firstRender);
    }

    async void OnPropertyChangedHandler(object sender, PropertyChangedEventArgs e)
    {
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    private void ChangeCalendarView(TUICalendarViewName viewName)
    {
        ViewModel.CalendarViewName = viewName;
    }

    private async Task MoveCalendarView(CalendarMove move)
    {
        await _calendarRef.MoveCalendar(move);

    }

    private async void ClearCalendar()
    {
        await _calendarRef.CalendarInterop.Clear();
    }

    private void ScrollToNow()
    {
        _calendarRef.CalendarInterop.ScrollToNow();
    }

    public void Dispose()
    {
        ViewModel.PropertyChanged -= OnPropertyChangedHandler;
    }

    private async Task ScrollToDate(DateTimeOffset selectedDateTime)
    {
        await _calendarRef.CalendarInterop.SetDate(selectedDateTime);
    }

    private async Task OnCreateSchedule(TUISchedule schedule)
    {
        await Task.Delay(3000);
        Console.WriteLine("OnCreateSchedule: {0}", schedule);
    }

    private async Task OnDeleteSchedule(string scheduleId)
    {
        await Task.Delay(3000);
        Console.WriteLine("OnDeleteSchedule: {0}", scheduleId);
    }

    private async Task OnClickSchedule(string scheduleId)
    {
        await Task.Delay(3000);
        Console.WriteLine("OnClickSchedule: {0}", scheduleId);
    }

    private async Task OnChangeCalendar(TUISchedule schedule)
    {
        await Task.Delay(3000);
        Console.WriteLine("OnChangeCalendar: {0}", schedule);
    }

}