@page "/calendar-calendrier"

@inherits CultureChangeAwareComponent

@inject DialogService DialogService

    <RadzenScheduler @ref=@scheduler SlotRender=@OnSlotRender style="height: 768px;" TItem="Appointment" Data=@appointments StartProperty="Start" EndProperty="End"
        TextProperty="Text" SelectedIndex="1"
        SlotSelect=@OnSlotSelect AppointmentSelect=@OnAppointmentSelect AppointmentRender=@OnAppointmentRender>
        <RadzenDayView/>
        <RadzenWeekView />
        <RadzenMonthView />
    </RadzenScheduler>

@*<EventConsole @ref=@console Class="mt-4" />*@

@code {
    RadzenScheduler<Appointment> scheduler;
    //EventConsole console;
    Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();

    IList<Appointment> appointments = new List<Appointment>
    {
        // Yesterday
        new Appointment { Start = DateTime.Today.AddDays(-1).AddHours(8).AddMinutes(0), End = DateTime.Today.AddDays(-1).AddHours(12).AddMinutes(0), Text = "John Smith" },
        new Appointment { Start = DateTime.Today.AddDays(-1).AddHours(8).AddMinutes(30), End = DateTime.Today.AddDays(-1).AddHours(10).AddMinutes(30), Text = "" },
        new Appointment { Start = DateTime.Today.AddDays(-1).AddHours(9).AddMinutes(0), End = DateTime.Today.AddDays(-1).AddHours(11).AddMinutes(0), Text = "" },
        new Appointment { Start = DateTime.Today.AddDays(-1).AddHours(9).AddMinutes(30), End = DateTime.Today.AddDays(-1).AddHours(11).AddMinutes(30), Text = "Jane Doe" },
        new Appointment { Start = DateTime.Today.AddDays(-1).AddHours(10).AddMinutes(0), End = DateTime.Today.AddDays(-1).AddHours(12).AddMinutes(0), Text = "" },
        new Appointment { Start = DateTime.Today.AddDays(-1).AddHours(10).AddMinutes(30), End = DateTime.Today.AddDays(-1).AddHours(12).AddMinutes(30), Text = "Jane Doe" },
        new Appointment { Start = DateTime.Today.AddDays(-1).AddHours(11).AddMinutes(0), End = DateTime.Today.AddDays(-1).AddHours(13).AddMinutes(0), Text = "" },
        new Appointment { Start = DateTime.Today.AddDays(-1).AddHours(11).AddMinutes(30), End = DateTime.Today.AddDays(-1).AddHours(13).AddMinutes(30), Text = "Jane Doe" },
        new Appointment { Start = DateTime.Today.AddDays(-1).AddHours(12).AddMinutes(0), End = DateTime.Today.AddDays(-1).AddHours(14).AddMinutes(0), Text = "" },
        new Appointment { Start = DateTime.Today.AddDays(-1).AddHours(12).AddMinutes(30), End = DateTime.Today.AddDays(-1).AddHours(14).AddMinutes(30), Text = "Jane Doe" },
        new Appointment { Start = DateTime.Today.AddDays(-1).AddHours(13).AddMinutes(0), End = DateTime.Today.AddDays(-1).AddHours(15).AddMinutes(0), Text = "" },
        new Appointment { Start = DateTime.Today.AddDays(-1).AddHours(13).AddMinutes(30), End = DateTime.Today.AddDays(-1).AddHours(15).AddMinutes(30), Text = "Jane Doe" },
    };

    void OnSlotRender(SchedulerSlotRenderEventArgs args) 
    {
        // Highlight today in month view
        if (args.View.Text == "Month" && args.Start.Date == DateTime.Today)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }

        // Highlight working hours (9-18)
        if ((args.View.Text == "Week" || args.View.Text == "Day") && args.Start.Hour > 8 && args.Start.Hour < 19)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }
    }

    async Task OnSlotSelect(SchedulerSlotSelectEventArgs args)
    {
        //console.Log($"SlotSelect: Start={args.Start} End={args.End}");

        Appointment data = await DialogService.OpenAsync<AddAppointmentPage>("Add Appointment",
            new Dictionary<string, object> { { "Start", args.Start }, { "End", args.End } });

        if (data != null)
        {
            appointments.Add(data);
            // Either call the Reload method or reassign the Data property of the Scheduler
            await scheduler.Reload();
        }
    }

    async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<Appointment> args)
    {
        //console.Log($"AppointmentSelect: Appointment={args.Data.Text}");

        await DialogService.OpenAsync<EditAppointmentPage>("Edit Appointment", new Dictionary<string, object> { { "Appointment", args.Data } });

        await scheduler.Reload();
    }

    void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<Appointment> args)
    {
        // Never call StateHasChanged in AppointmentRender - would lead to infinite loop

        if (args.Data.Text == "Birthday")
        {
            args.Attributes["style"] = "background: red";
        }
        else if (string.IsNullOrEmpty(args.Data.Text))
        {
            args.Attributes["style"] = "background: orange";
        }
    }
}