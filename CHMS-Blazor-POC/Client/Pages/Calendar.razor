@page "/calendar-calendrier"

@using StatCan.Chms.Client.Components.Booking
@using Microsoft.AspNetCore.WebUtilities
@inherits CultureChangeAwareComponent

@inject DialogService DialogService
@inject IStringLocalizer<Calendar> Loc
@inject AppState _appState;
@inject HttpClient HttpClient;
@inject ChmsGraphQLClient ChmsGraphQlClient
@inject ChmsOpenApiClient ChmsOpenApiClient


    <RadzenScheduler @ref=@scheduler SlotRender=@OnSlotRender style="height: 768px;" TItem="Appointment" StartProperty="Start" EndProperty="End"
        TextProperty="Display" SelectedIndex="1"
        AppointmentSelect=@OnAppointmentSelect AppointmentRender=@OnAppointmentRender>
        <RadzenDayView/>
        <RadzenWeekView />
        <RadzenMonthView />
    </RadzenScheduler>

@*<EventConsole @ref=@console Class="mt-4" />*@

@code {
    RadzenScheduler<Appointment> scheduler;
    //EventConsole console;
    Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();

    [Parameter]
    [SupplyParameterFromQuery(Name = "clientapi")]
    public string? ClientApi { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        _appState.OnSiteChanged += AppStateOnOnSiteChanged;

        if (_appState.IsSiteSelected)
        {
            await UpdateFromAppointments(_appState.CurrentSite!.Name);
        }
        
        await base.OnInitializedAsync();
    }
    

    private async void AppStateOnOnSiteChanged(object? sender, SiteChangedEventArgs e)
    {
        await UpdateFromAppointments(e.NewSite.Name);
    }

    private async Task UpdateFromAppointments(string site)
    {
        IEnumerable<Appointment> appointments;

        var from = DateTimeOffset.Now.AddDays(-7);
        var to = DateTimeOffset.Now.AddDays(7);
        
        if ("httpclient".Equals(ClientApi, StringComparison.OrdinalIgnoreCase))
        {
            // What is the correct way to format dates?
            // In this case, "u" is a ISO 8601 format that and the "Z" means that the it's in UTC.
            // "u"	UniversalSortableDateTimePattern	yyyy'-'MM'-'dd HH':'mm':'ss'Z'
            // 2008-04-10 13:30:00Z
            //
            // "Although the result string should express a time as Coordinated Universal Time (UTC), no conversion of
            //  the original DateTime value is performed during the formatting operation. Therefore, you must convert
            //  a DateTime value to UTC by calling the DateTime.ToUniversalTime method before formatting it.
            //  In contrast, DateTimeOffset values perform this conversion automatically; there is no need to call the
            //  DateTimeOffset.ToUniversalTime method before the formatting operation."
            //
            //  See https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-date-and-time-format-strings#date-and-time-formats
            var request = QueryHelpers.AddQueryString("api/booking-reservation/appointments", new Dictionary<string, string>()
            {
                {"site", site},
                {"from", from.ToString("u")},
                {"to", to.ToString("u")}
            });

            var results = await HttpClient.GetFromJsonAsync<StatCan.Chms.DataTransfer.Booking.AppointmentDetailData[]>(request);
            appointments = results!.Select
                (
                    appointment =>
                        new Appointment
                        {
                            Start = appointment.Time,
                            End = appointment.Time.AddMinutes(appointment.DurationMinute),
                            Text = appointment.RespondentName
                        }
                ).ToList();
        }
        else if ("nswag".Equals(ClientApi, StringComparison.OrdinalIgnoreCase))
        {
            // What is the correct way to format dates?
            // The generated ChmsOpenApiClient formats the date with "s" which is a ISO 8601 format that doesn't contains the offset. 
            // "s"	SortableDateTimePattern	yyyy'-'MM'-'dd'T'HH':'mm':'ss
            // 2008-04-10T06:30:00
            //
            // "For example, the result strings produced by formatting the date and time values 2014-11-15T18:32:17+00:00 and 2014-11-15T18:32:17+08:00 are identical."
            //
            // See https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-date-and-time-format-strings#date-and-time-formats 
            var result = await ChmsOpenApiClient.AppointmentsAsync(site, @from, to);
            appointments = result!.Select
                (
                    appointment =>
                        new Appointment
                        {
                            Start = appointment.Time.DateTime,
                            End = appointment.Time.DateTime.AddMinutes(appointment.DurationMinute),
                            Text = appointment.RespondentName
                        }
                ).ToList();
        }
        else
        {
            // What is the correct way to format dates?
            // The formatter used by Strawberry Shake can be found https://github.com/ChilliCream/hotchocolate/blob/main/src/StrawberryShake/Client/src/Core/Serialization/DateTimeSerializer.cs
            //
            // If the DateTimeOffset is already in UTC, it uses a ISO 8601 format indicating that it's already in UTC.
            //   _utcFormat = "yyyy-MM-ddTHH\\:mm\\:ss.fffZ"
            // Otherwise, it uses a ISO 8601 format that contains the offset
            //   _localFormat = "yyyy-MM-ddTHH\\:mm\\:ss.fffzzz"
            var result = await ChmsGraphQlClient
                .GetAppointmentsAtSiteBetweenDates.ExecuteAsync(site, from, to);

            appointments = result!.Data!.Booking.Appointments.Select(
                appointment =>
                    new Appointment
                    {
                        Start = appointment.Time.DateTime,
                        End = appointment.Time.AddMinutes(appointment.DurationMinute).DateTime,
                        Text = appointment.RespondentName
                    }
                ).ToList();
        }

        scheduler.Data = appointments;
        await scheduler.Reload();
    }
    
    protected override void Dispose(bool disposing)
    {
        _appState.OnSiteChanged -= AppStateOnOnSiteChanged;
        base.Dispose(disposing);
    }

    void OnSlotRender(SchedulerSlotRenderEventArgs args)
    {
    // Highlight today in month view
        if (args.View.Text == "Month" && args.Start.Date == DateTime.Today)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }

    // Highlight working hours (9-18)
        if ((args.View.Text == "Week" || args.View.Text == "Day") && args.Start.Hour > 8 && args.Start.Hour < 19)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }
    }

    async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<Appointment> args)
    {
        //console.Log($"AppointmentSelect: Appointment={args.Data.Text}");

        if (string.IsNullOrEmpty(args.Data.Text))
        {
            await DialogService.OpenAsync<AddAppointmentDialog>(@Loc["Make.Appointment"], new Dictionary<string, object> { { "Appointment", args.Data } });
        }
        else
        {
            await DialogService.OpenAsync<EditAppointmentDialog>(@Loc["Edit.Appointment"], new Dictionary<string, object> { { "Appointment", args.Data } });
        }

        await scheduler.Reload();
    }

    void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<Appointment> args)
    {
        // Never call StateHasChanged in AppointmentRender - would lead to infinite loop

        if (args.Data.Text == "Birthday")
        {
            args.Attributes["style"] = "background: red";
        }
        else if (string.IsNullOrEmpty(args.Data.Text))
        {
            args.Attributes["style"] = "background: orange";
        }
    }
}