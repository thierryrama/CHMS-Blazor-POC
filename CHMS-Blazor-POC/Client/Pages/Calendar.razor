@page "/calendar-calendrier"

@using StatCan.Chms.Client.Components.Booking
@using System.Diagnostics
@inherits CultureChangeAwareComponent

@inject DialogService DialogService
@inject IStringLocalizer<Calendar> Loc
@inject AppState _appState;
@inject ChmsGraphQLClient ChmsGraphQlClient

    <RadzenScheduler @ref=@scheduler SlotRender=@OnSlotRender style="height: 768px;" TItem="Appointment" StartProperty="Start" EndProperty="End"
        TextProperty="Display" SelectedIndex="1"
        AppointmentSelect=@OnAppointmentSelect AppointmentRender=@OnAppointmentRender>
        <RadzenDayView/>
        <RadzenWeekView />
        <RadzenMonthView />
    </RadzenScheduler>

@*<EventConsole @ref=@console Class="mt-4" />*@

@code {
    RadzenScheduler<Appointment> scheduler;
    //EventConsole console;
    Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();

    protected override async Task OnInitializedAsync()
    {
        _appState.OnSiteChanged += AppStateOnOnSiteChanged;

        if (_appState.IsSiteSelected)
        {
            await UpdateFromAppointments(_appState.CurrentSite!.Name);
        }
        
        await base.OnInitializedAsync();
    }
    

    private async void AppStateOnOnSiteChanged(object? sender, SiteChangedEventArgs e)
    {
        await UpdateFromAppointments(e.NewSite.Name);
    }

    private async Task UpdateFromAppointments(string site)
    {
        var result = await ChmsGraphQlClient
            .GetAppointmentsAtSiteBetweenDates.ExecuteAsync(site, DateTimeOffset.Now.AddDays(-7), DateTimeOffset.Now.AddDays(7));
        
        var appointments = new List<Appointment>();
        foreach (var appointment in result!.Data!.Booking.Appointments)
        {
            appointments.Add(new Appointment
            {
                Start = appointment.Time.DateTime,
                End = appointment.Time.AddMinutes(appointment.DurationMinute).DateTime,
                Text = appointment.RespondentName
            });
        }

        scheduler.Data = appointments;
        await scheduler.Reload();
    }
    
    protected override void Dispose(bool disposing)
    {
        _appState.OnSiteChanged -= AppStateOnOnSiteChanged;
        base.Dispose(disposing);
    }

    void OnSlotRender(SchedulerSlotRenderEventArgs args)
    {
    // Highlight today in month view
        if (args.View.Text == "Month" && args.Start.Date == DateTime.Today)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }

    // Highlight working hours (9-18)
        if ((args.View.Text == "Week" || args.View.Text == "Day") && args.Start.Hour > 8 && args.Start.Hour < 19)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }
    }

    async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<Appointment> args)
    {
        //console.Log($"AppointmentSelect: Appointment={args.Data.Text}");

        if (string.IsNullOrEmpty(args.Data.Text))
        {
            await DialogService.OpenAsync<AddAppointmentDialog>(@Loc["Make.Appointment"], new Dictionary<string, object> { { "Appointment", args.Data } });
        }
        else
        {
            await DialogService.OpenAsync<EditAppointmentDialog>(@Loc["Edit.Appointment"], new Dictionary<string, object> { { "Appointment", args.Data } });
        }

        await scheduler.Reload();
    }

    void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<Appointment> args)
    {
        // Never call StateHasChanged in AppointmentRender - would lead to infinite loop

        if (args.Data.Text == "Birthday")
        {
            args.Attributes["style"] = "background: red";
        }
        else if (string.IsNullOrEmpty(args.Data.Text))
        {
            args.Attributes["style"] = "background: orange";
        }
    }
}