@page "/calendar-calendrier"
@using toast_ui.blazor_calendar.Models
@using toast_ui.blazor_calendar
@using System.ComponentModel
<h3>Calendar</h3>
<div class="btn-group m-2" role="group" aria-label="Basic example">
  <button type="button" @onclick=@(()=> ChangeCalendarView(TUICalendarViewName.Month)) class="btn btn-secondary">Month</button>
  <button type="button" @onclick=@(()=> ChangeCalendarView(TUICalendarViewName.Week)) class="btn btn-secondary">Week</button>
  <button type="button" @onclick=@(()=> ChangeCalendarView(TUICalendarViewName.Day)) class="btn btn-secondary">Day</button>
</div>
<br />
<div class="btn-group m-2" role="group" aria-label="Basic example">
    <button type="button" @onclick=@(async ()=> await MoveCalendarView(CalendarMove.Previous)) class="btn btn-secondary">Previous</button>
    <button type="button" @onclick=@(async ()=> await MoveCalendarView(CalendarMove.Today)) class="btn btn-secondary">Today</button>
    <button type="button" @onclick=@(async ()=> await MoveCalendarView(CalendarMove.Next)) class="btn btn-secondary">Next</button>
</div>
<div>
    <button type="button" @onclick=@(()=> ScrollToNow()) class="btn btn-secondary">Scroll To Now</button>
</div>

<div class="d-flex flex-row align-items-center m-2">
    <div class="pr-2">Scroll To Date:</div>
    <div class="text-sm-center">
        <input type="date" value="@selectDate.ToString("MM/dd/yyyy")" @onchange="@(async (e) => await ScrollToDate(DateTimeOffset.Parse(e.Value.ToString())))" />
    </div>
</div>
<div class="btn-group m-2" role="group" aria-label="Basic example">
<button type="button" @onclick=@(()=> ClearCalendar()) class="btn btn-secondary">Clear Calendar</button>
</div>
<TUICalendar 
    Schedules="Schedules" 
    CalendarOptions="CalendarOptions" 
    CalendarProperties="CalendarProps"
    CalendarViewName="CalendarViewName"
    @bind-VisibleStartDateRange="StartDate"
    @bind-VisibleEndDateRange="EndDate"
    @ref=_calendarRef
    ></TUICalendar>
Where is the calendar?

@code {
    private DateTimeOffset selectDate = DateTimeOffset.Now;
    private List<TUISchedule> Schedules = new();
    private TUICalendarOptions CalendarOptions = new TUICalendarOptions()
    {
        useCreationPopup = true,
        useDetailPopup = true,
        defaultView = TUICalendarViewName.Month,
        taskView = false,
        scheduleView = true
                
    };
    private List<TUICalendarProps> CalendarProps;
    private TUICalendarViewName CalendarViewName;
    private DateTimeOffset? StartDate = DateTimeOffset.Now;
    private DateTimeOffset? EndDate = DateTimeOffset.Now;
    private TUICalendar _calendarRef;

    protected override void OnInitialized()
    {
        CalendarProps = new List<TUICalendarProps>();
        var calendar1 = new TUICalendarProps()
        {
            id = "1",
            name = "My Test Calendar",
            color = "#ffffff",
            bgColor = "#9e5fff",
            dragBgColor = "#9e5fff",
            borderColor = "#9e5fff"
        };
        CalendarProps.Add(calendar1);
        
        var sched = new TUISchedule()
        {
            id = Guid.NewGuid().ToString(),
            calendarId = "1",
            start = DateTimeOffset.Now,
            end = DateTimeOffset.Now.AddHours(1),
            title = "Hello Mand",
            body = "Todo something special",
            category = "time",
            isVisible = true,
            isAllDay = false,
            state = "busy"
        };
        Schedules.Add(sched);
        base.OnInitialized();
    }
    
    async void OnPropertyChangedHandler(object sender, PropertyChangedEventArgs e)
    {
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    private void ChangeCalendarView(TUICalendarViewName viewName)
    {
        CalendarViewName = viewName;
    }

    private async Task MoveCalendarView(CalendarMove move)
    {
        await _calendarRef.MoveCalendar(move);

    }

    private async void ClearCalendar()
    {
        await _calendarRef.CalendarInterop.Clear();
    }

    private void ScrollToNow()
    {
        _calendarRef.CalendarInterop.ScrollToNow();
    }

    private async Task ScrollToDate(DateTimeOffset selectedDateTime)
    {
        await _calendarRef.CalendarInterop.SetDate(selectedDateTime);
    }

}